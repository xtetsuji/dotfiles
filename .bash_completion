# -*- shell-script -*-
# homebrew の流儀であれば /usr/local/etc/bash_completion.d/ 以下に
# 個別のスクリプトファイルとして投げ込んでおくという手もある

OUTSIDE_COMPLETION_FILES=(
    "${BREW_PREFIX:-/usr/local}/Cellar/plenv/2.3.0/completions/plenv.bash" # plenv
    "${BREW_PREFIX:-/usr/local}/etc/bash_completion.d/git-completion.bash" # git
)
for f in "${OUTSIDE_COMPLETION_FILES[@]}" ; do
    test -f "$f" && source "$f"
done
unset OUTSIDE_COMPLETION_FILES

_cpanm(){
    local cur prev opts i
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="-v --verbose -q --quiet --interactive -f --force -n --notest --test-only -S --sudo --installdeps --showdeps --reinstall --mirro --mirror-only --prompt -l --local-lib -L --local-lib-contained --self-contained --auto-cleanup --self-upgrade --info --look -V --version"
    COMPREPLY=( $(compgen -W "$opts" -- ${cur} ))
    return 0
} &&
complete -o default -F _cpanm cpanm

# TODO: under construction.
type mojo >/dev/null 2>&1 &&
_mojo(){
    local cur prev opts_names opts_all opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts_names="cgi cpanify daemon eval generate get inflate prefork psgi routes test version"
    opts_all="$opts_names -h --help --home -m --mode"

    case "${prev}" in
        help)
            COMPREPLY=( $(compgen -W "$opts_names" -- ${cur} ))
            return 0
            ;;
        cgi)
            COMPREPLY=( $(compgen -W "--nph" -- ${cur} ))
            return 0
            ;;
        cpanify)
            # [OPTIONS] [FILE]
            opts="-p --password -u --user"
            COMPREPLY=( $(compgen -W "$opts" -- ${cur} ))
            return 0
            ;;
        daemon)
            # TODO: options argument completion.
            opts="-b --backlog -c --clients -g --group -i --inactivity -l --listen -p --proxy -r --requests -u --user"
            COMPREPLY=( $(compgen -W "$opts" -- ${cur} ))
            return 0
            ;;
        *)
            ;;
    esac

    COMPREPLY=( $(compgen -W "$opts_all" -- ${cur} ))
} &&
complete -F _mojo mojo

type minil >/dev/null 2>&1 &&
_minil(){
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="new test dist install release help"
    COMPREPLY=( $(compgen -W "$opts" -- ${cur} ))
} &&
complete -F _minil minil

# mdfind [-live] [-count] [-onlyin directory] [-name fileName] query
# see: http://takuya-1st.hatenablog.jp/entry/20111116/1321427556
type mdfind >/dev/null 2>&1 &&
_mdfind(){
    local cur prev opts
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="-0 -live -count -onlyin -name"
    COMPREPLY=( $(compgen -W "$opts" -- ${cur} ))
} &&
complete -F _mdfind mdfind

# mdls [-name attributeName] [-raw [-nullMarker markerString]] file ...
type mdls >/dev/null 2>&1 &&
_mdls(){
    local cur prev opts
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="-name -raw -nullMarker"
    COMPREPLY=( $(compgen -W "$opts" -- ${cur} ))
} &&
complete -F _mdls mdls

type sips >/dev/null 2>&1 &&
_sips(){
    local cur prev opts_all opts_property opts_format opts_format_options
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts_all="-g --getProperty -X --extractTag -v --verify -x extractProfile -s --setProperty -d --deletePRoperty --deleteTag --copyTag --loadTag --repair -e --embedProfile -E --embedProfileIfNone -m --matchTo -M --matchToWithIntent --deleteColorManagementProperties -r --rotate -f --flip -c --cropToHeightWidth -p --padToHeightWidth --padColor -z --resampleHeightWidth --resampleWidth --resampleHeight -Z --resampleHeightWidthMax -i --addIcon"
    opts_property="all allxml dipHeight dipWidth pixelHeight pixelWidth typeIdentifier format formatOptions space samplesPerPixel bitsPerSample creation make model software description copyright artist profile hasAlpha description size cmm version class space pcs craetion platform quality deviceManufacturer deviceModel deviceAttributes0 deviceAttributes1 renderingIntent creator copyright md5"
    opts_format="jpeg tiff png gif jp2 pict bmp qtif psd sgi tga"
    opts_format_options="low normal high best"
    case "${prev}" in
        --help)
            COMPREPLY=( $(compgen -W "$opts_names" -- ${cur} ))
            return 0
            ;;
    --getProperty|--setProperty|--deleteProperty)
        COMPREPLY=( $(compgen -W "$opts_property" -- ${cur} ))
            return 0
        ;;
    --format)
        COMPREPLY=( $(compgen -W "$opts_format" -- ${cur} ))
            return 0
        ;;
    --formatOptions)
        COMPREPLY=( $(compgen -W "$opts_format_options" -- ${cur} ))
            return 0
        ;;
        *)
            ;;
    esac
    COMPREPLY=( $(compgen -W "$opts_all" -- ${cur} ))
} &&
complete -F _sips sips

type pbpaste >/dev/null 2>&1 &&
_pbpaste(){
    local cur prev opts i
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="-help -Prefer"
    case ${prev} in
        -Prefer)
            opts="rtf ps txt"
            ;;
        *)
            ;;
    esac
    COMPREPLY=( $(compgen -W "$opts" -- ${cur} ))
    return 0
} &&
complete -F _pbpaste pbpaste

type pbcopy >/dev/null 2>&1 &&
_pbcopy(){
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="-help"
    COMPREPLY=( $(compgen -W "$opts" -- ${cur} ))
    return 0
} &&
complete -F _pbpaste pbpaste

type pbedit >/dev/null 2>&1 &&
_pbedit_completion(){
    local cur=${COMP_WORDS[COMP_CWORD]}
    case "$COMP_CWORD" in
        1)
            COMPREPLY=( $(compgen -W "$(pbedit subcommands)" -- $cur ) )
            ;;
    esac
}
complete -F _pbedit_completion pbedit

# cd completion
# original is in /usr/local/etc/bash_completion
unset -f _cd
_cd()
{
    local cur IFS=$'\n' i j k
    _get_comp_words_by_ref -n : cur

    # https://codeday.me/jp/qa/20190128/173873.html
    if [[ $COMP_CWORD == 1 && $cur =~ ^: ]] ; then
        COMPREPLY=( $( compgen -W "$(cd :subcommands)" -- "$cur" ) )
        __ltrim_colon_completions "$cur"
        return 0
    fi

    # try to allow variable completion
    if [[ "$cur" == ?(\\)\$* ]]; then
        COMPREPLY=( $( compgen -v -P '$' -- "${cur#?(\\)$}" ) )
        return 0
    fi

    _compopt_o_filenames

    # Use standard dir completion if no CDPATH or parameter starts with /,
    # ./ or ../
    if [[ -z "${CDPATH:-}" || "$cur" == ?(.)?(.)/* ]]; then
        _filedir -d
        return 0
    fi

    local -r mark_dirs=$(_rl_enabled mark-directories && echo y)
    local -r mark_symdirs=$(_rl_enabled mark-symlinked-directories && echo y)

    # we have a CDPATH, so loop on its contents
    for i in ${CDPATH//:/$'\n'}; do
        # create an array of matched subdirs
        k="${#COMPREPLY[@]}"
        for j in $( compgen -d $i/$cur ); do
            if [[ ( $mark_symdirs && -h $j || $mark_dirs && ! -h $j ) && ! -d ${j#$i/} ]]; then
                j="${j}/"
            fi
            COMPREPLY[k++]=${j#$i/}
        done
    done

    _filedir -d

    if [[ ${#COMPREPLY[@]} -eq 1 ]]; then
        i=${COMPREPLY[0]}
        if [[ "$i" == "$cur" && $i != "*/" ]]; then
            COMPREPLY[0]="${i}/"
        fi
    fi

    return 0
}

# if only login shell `exec $SHELL -l` execution, above script causes syntax error.
#   bash: /Users/tetsuji.ogata/.bash_completion: line 188: syntax error in conditional expression: unexpected token `('
#   bash: /Users/tetsuji.ogata/.bash_completion: line 188: syntax error near `?(\'
#   bash: /Users/tetsuji.ogata/.bash_completion: line 188: `    if [[ "$cur" == ?(\\)\$* ]]; then'